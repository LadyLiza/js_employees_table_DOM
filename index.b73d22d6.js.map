{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar tableHeaders = document.querySelectorAll(\"th\");\nvar tableBody = document.querySelector(\"table tbody\");\nvar table = document.querySelector(\"table\");\nvar lastSortedColumnIndex = null;\nvar sortDirection = \"asc\";\nfunction sortTableByColumn(columnIndex, direction) {\n    var tableRows = Array.from(tableBody.querySelectorAll(\"tr\"));\n    tableRows.sort(function(rowA, rowB) {\n        var cellA = rowA.cells[columnIndex].textContent.trim();\n        var cellB = rowB.cells[columnIndex].textContent.trim();\n        if (direction === \"asc\") return cellA.localeCompare(cellB, undefined, {\n            numeric: true\n        });\n        else return cellB.localeCompare(cellA, undefined, {\n            numeric: true\n        });\n    });\n    tableRows.forEach(function(row) {\n        return tableBody.append(row);\n    });\n}\ntableHeaders.forEach(function(header, columnIndex) {\n    header.addEventListener(\"click\", function() {\n        if (lastSortedColumnIndex === columnIndex) sortDirection = sortDirection === \"asc\" ? \"desc\" : \"asc\";\n        else sortDirection = \"asc\";\n        lastSortedColumnIndex = columnIndex;\n        sortTableByColumn(columnIndex, sortDirection);\n    });\n});\ntableBody.addEventListener(\"click\", function(e) {\n    var clickedRow = e.target.closest(\"tr\");\n    if (clickedRow) {\n        tableBody.querySelectorAll(\"tr\").forEach(function(row) {\n            return row.classList.remove(\"active\");\n        });\n        clickedRow.classList.add(\"active\");\n    }\n});\nvar formElement = document.createElement(\"form\");\nformElement.className = \"new-employee-form\";\nformElement.innerHTML = '\\n  <label>\\n    Name:\\n    <input name=\"name\" type=\"text\" data-qa=\"name\" required>\\n  </label>\\n  <label>\\n    Position:\\n    <input name=\"position\" type=\"text\" data-qa=\"position\">\\n  </label>\\n  <label>\\n    Office:\\n    <select name=\"office\" data-qa=\"office\" required>\\n      <option value=\"Tokyo\">Tokyo</option>\\n      <option value=\"Singapore\">Singapore</option>\\n      <option value=\"London\">London</option>\\n      <option value=\"New York\">New York</option>\\n      <option value=\"Edinburgh\">Edinburgh</option>\\n      <option value=\"San Francisco\">San Francisco</option>\\n    </select>\\n  </label>\\n  <label>\\n    Age:\\n    <input name=\"age\" type=\"number\" data-qa=\"age\" required>\\n  </label>\\n  <label>\\n    Salary:\\n    <input name=\"salary\" type=\"number\" data-qa=\"salary\" required>\\n  </label>\\n  <button type=\"submit\" data-qa=\"save-button\">Save to table</button>\\n';\ndocument.body.appendChild(formElement);\nformElement.addEventListener(\"submit\", function(e) {\n    e.preventDefault();\n    var newName = formElement.name.value.trim();\n    var position = formElement.position.value.trim();\n    var office = formElement.office.value;\n    var age = parseInt(formElement.age.value.trim(), 10);\n    var salary = parseFloat(formElement.salary.value.trim());\n    if (newName.length < 4) {\n        showNotification(\"Name must have at least 4 letters.\", \"error\");\n        return;\n    }\n    if (position.length === 0) {\n        showNotification(\"Position must have at least one letter.\", \"error\");\n        return;\n    }\n    if (age < 18 || age > 90) {\n        showNotification(\"Age must be between 18 and 90.\", \"error\");\n        return;\n    }\n    if (isNaN(salary) || salary <= 0) {\n        showNotification(\"Salary must be a valid positive number.\", \"error\");\n        return;\n    }\n    var newRow = document.createElement(\"tr\");\n    newRow.innerHTML = \"\\n    <td>\".concat(newName, \"</td>\\n    <td>\").concat(position, \"</td>\\n    <td>\").concat(office, \"</td>\\n    <td>\").concat(age, \"</td>\\n    <td>$\").concat(salary.toLocaleString(\"en-US\").replace(/,/g, \",\"), \"</td>\\n  \");\n    table.querySelector(\"tbody\").appendChild(newRow);\n    showNotification(\"Employee added successfully.\", \"success\");\n    formElement.reset();\n});\nfunction showNotification(message, type) {\n    var notification = document.createElement(\"div\");\n    notification.className = \"notification \".concat(type);\n    notification.setAttribute(\"data-qa\", \"notification\");\n    notification.textContent = message;\n    document.body.appendChild(notification);\n    setTimeout(function() {\n        notification.remove();\n    }, 3000);\n}\ntable.querySelectorAll(\"tbody td\").forEach(function(cell) {\n    cell.addEventListener(\"dblclick\", function() {\n        var initialValue = cell.innerText;\n        var input = document.createElement(\"input\");\n        input.className = \"cell-input\";\n        input.value = initialValue;\n        cell.innerText = \"\";\n        cell.appendChild(input);\n        input.focus();\n        input.addEventListener(\"blur\", function() {\n            cell.innerText = input.value.trim() || initialValue;\n        });\n        input.addEventListener(\"keypress\", function(e) {\n            if (e.key === \"Enter\") cell.innerText = input.value.trim() || initialValue;\n        });\n    });\n});\n\n//# sourceMappingURL=index.b73d22d6.js.map\n","'use strict';\n\nconst tableHeaders = document.querySelectorAll('th');\nconst tableBody = document.querySelector('table tbody');\nconst table = document.querySelector('table');\n\nlet lastSortedColumnIndex = null;\nlet sortDirection = 'asc';\n\nfunction sortTableByColumn(columnIndex, direction) {\n  const tableRows = Array.from(tableBody.querySelectorAll('tr'));\n\n  tableRows.sort((rowA, rowB) => {\n    const cellA = rowA.cells[columnIndex].textContent.trim();\n    const cellB = rowB.cells[columnIndex].textContent.trim();\n\n    if (direction === 'asc') {\n      return cellA.localeCompare(cellB, undefined, { numeric: true });\n    } else {\n      return cellB.localeCompare(cellA, undefined, { numeric: true });\n    }\n  });\n\n  tableRows.forEach((row) => tableBody.append(row));\n}\n\ntableHeaders.forEach((header, columnIndex) => {\n  header.addEventListener('click', () => {\n    if (lastSortedColumnIndex === columnIndex) {\n      sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';\n    } else {\n      sortDirection = 'asc';\n    }\n\n    lastSortedColumnIndex = columnIndex;\n\n    sortTableByColumn(columnIndex, sortDirection);\n  });\n});\n\ntableBody.addEventListener('click', (e) => {\n  const clickedRow = e.target.closest('tr');\n\n  if (clickedRow) {\n    tableBody\n      .querySelectorAll('tr')\n      .forEach((row) => row.classList.remove('active'));\n\n    clickedRow.classList.add('active');\n  }\n});\n\nconst formElement = document.createElement('form');\n\nformElement.className = 'new-employee-form';\n\nformElement.innerHTML = `\n  <label>\n    Name:\n    <input name=\"name\" type=\"text\" data-qa=\"name\" required>\n  </label>\n  <label>\n    Position:\n    <input name=\"position\" type=\"text\" data-qa=\"position\">\n  </label>\n  <label>\n    Office:\n    <select name=\"office\" data-qa=\"office\" required>\n      <option value=\"Tokyo\">Tokyo</option>\n      <option value=\"Singapore\">Singapore</option>\n      <option value=\"London\">London</option>\n      <option value=\"New York\">New York</option>\n      <option value=\"Edinburgh\">Edinburgh</option>\n      <option value=\"San Francisco\">San Francisco</option>\n    </select>\n  </label>\n  <label>\n    Age:\n    <input name=\"age\" type=\"number\" data-qa=\"age\" required>\n  </label>\n  <label>\n    Salary:\n    <input name=\"salary\" type=\"number\" data-qa=\"salary\" required>\n  </label>\n  <button type=\"submit\" data-qa=\"save-button\">Save to table</button>\n`;\n\ndocument.body.appendChild(formElement);\n\nformElement.addEventListener('submit', (e) => {\n  e.preventDefault();\n\n  const newName = formElement.name.value.trim();\n  const position = formElement.position.value.trim();\n  const office = formElement.office.value;\n  const age = parseInt(formElement.age.value.trim(), 10);\n  const salary = parseFloat(formElement.salary.value.trim());\n\n  if (newName.length < 4) {\n    showNotification('Name must have at least 4 letters.', 'error');\n\n    return;\n  }\n\n  if (position.length === 0) {\n    showNotification('Position must have at least one letter.', 'error');\n\n    return;\n  }\n\n  if (age < 18 || age > 90) {\n    showNotification('Age must be between 18 and 90.', 'error');\n\n    return;\n  }\n\n  if (isNaN(salary) || salary <= 0) {\n    showNotification('Salary must be a valid positive number.', 'error');\n\n    return;\n  }\n\n  const newRow = document.createElement('tr');\n\n  newRow.innerHTML = `\n    <td>${newName}</td>\n    <td>${position}</td>\n    <td>${office}</td>\n    <td>${age}</td>\n    <td>$${salary.toLocaleString('en-US').replace(/,/g, ',')}</td>\n  `;\n\n  table.querySelector('tbody').appendChild(newRow);\n\n  showNotification('Employee added successfully.', 'success');\n\n  formElement.reset();\n});\n\nfunction showNotification(message, type) {\n  const notification = document.createElement('div');\n\n  notification.className = `notification ${type}`;\n  notification.setAttribute('data-qa', 'notification');\n\n  notification.textContent = message;\n\n  document.body.appendChild(notification);\n\n  setTimeout(() => {\n    notification.remove();\n  }, 3000);\n}\n\ntable.querySelectorAll('tbody td').forEach((cell) => {\n  cell.addEventListener('dblclick', () => {\n    const initialValue = cell.innerText;\n    const input = document.createElement('input');\n\n    input.className = 'cell-input';\n    input.value = initialValue;\n    cell.innerText = '';\n    cell.appendChild(input);\n    input.focus();\n\n    input.addEventListener('blur', () => {\n      cell.innerText = input.value.trim() || initialValue;\n    });\n\n    input.addEventListener('keypress', (e) => {\n      if (e.key === 'Enter') {\n        cell.innerText = input.value.trim() || initialValue;\n      }\n    });\n  });\n});\n"],"names":["tableHeaders","document","querySelectorAll","tableBody","querySelector","table","lastSortedColumnIndex","sortDirection","forEach","header","columnIndex","addEventListener","direction","tableRows","Array","from","sort","rowA","rowB","cellA","cells","textContent","trim","cellB","localeCompare","undefined","numeric","row","append","e","clickedRow","target","closest","classList","remove","add","formElement","createElement","showNotification","message","type","notification","className","concat","setAttribute","body","appendChild","setTimeout","innerHTML","preventDefault","newName","name","value","position","office","age","parseInt","salary","parseFloat","length","isNaN","newRow","toLocaleString","replace","reset","cell","initialValue","innerText","input","focus","key"],"version":3,"file":"index.b73d22d6.js.map"}